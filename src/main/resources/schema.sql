DROP TABLE IF EXISTS film_likes;
DROP TABLE IF EXISTS film_genres;
DROP TABLE IF EXISTS friendships;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS mpa_ratings;
DROP TABLE IF EXISTS film_directors;
DROP TABLE IF EXISTS directors;

CREATE TABLE IF NOT EXISTS directors (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_directors (
    film_id     BIGINT NOT NULL,
    director_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, director_id),
    CONSTRAINT fk_fd_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    CONSTRAINT fk_fd_dir  FOREIGN KEY (director_id) REFERENCES directors(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS mpa_ratings (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS genres (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS users (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email     VARCHAR(255) NOT NULL UNIQUE,
    login     VARCHAR(100) NOT NULL,
    name      VARCHAR(255),
    birthday  DATE,
    CONSTRAINT chk_user_login_no_spaces CHECK (login NOT LIKE '% %'),
    CONSTRAINT chk_user_birthday_past CHECK (birthday IS NULL OR birthday <= CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS films (
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(255) NOT NULL,
    description   VARCHAR(200) NOT NULL,
    release_date  DATE NOT NULL,
    duration      INTEGER NOT NULL,
    mpa        BIGINT NOT NULL,
    CONSTRAINT fk_films_mpa FOREIGN KEY (mpa) REFERENCES mpa_ratings(id),
    CONSTRAINT chk_duration_positive CHECK (duration > 0),
    CONSTRAINT chk_release_not_before_1895 CHECK (release_date >= DATE '1895-12-28')
);

CREATE TABLE IF NOT EXISTS friendships (
    requester_id BIGINT NOT NULL,
    addressee_id BIGINT NOT NULL,
    status       VARCHAR(20) NOT NULL,
    CONSTRAINT pk_friendships PRIMARY KEY (requester_id, addressee_id),
    CONSTRAINT fk_friend_req FOREIGN KEY (requester_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_friend_add FOREIGN KEY (addressee_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT chk_friend_not_self CHECK (requester_id <> addressee_id)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id  BIGINT NOT NULL,
    genre_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_fg_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    CONSTRAINT fk_fg_genre FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_like_film FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    CONSTRAINT fk_like_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_fd_dir   ON film_directors(director_id);
CREATE INDEX IF NOT EXISTS idx_fd_film  ON film_directors(film_id);
CREATE INDEX IF NOT EXISTS idx_films_mpa ON films(mpa);
CREATE INDEX IF NOT EXISTS idx_film_genres_genre ON film_genres(genre_id);
CREATE INDEX IF NOT EXISTS idx_film_likes_user ON film_likes(user_id);
CREATE INDEX IF NOT EXISTS idx_friend_addressee ON friendships(addressee_id);
CREATE INDEX IF NOT EXISTS idx_friend_status ON friendships(status);
